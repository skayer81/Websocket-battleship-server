export enum TypesServerAction {
  "reg",
  "create_room",
  "add_user_to_room",
  "add_ships",
  "attack",
  "randomAttack",
}

export enum TypesClientAction {
  "reg",
  "update_winners",
  "create_game",
  "update_room",
  "start_game",
  "attack",
  "turn",
  "finish",
}

// Player
// Login or create player
// <-  to Server
export type toServerReg = {
  type: "reg";
  data: {
    name: string;
    password: string;
  };
  id: 0;
};
////-> to Client to Client
export type toClientReg = {
  type: "reg";
  data: {
    name: string;
    index: number | string;
    error: boolean;
    errorText: string;
  };
  id: 0;
};
//Update winners (for all after every winners table update)
//-> to Client
export type UpdatewinnersToClient = {
  type: "update_winners";
  data: [
    {
      name: string;
      wins: number;
    },
  ];
  id: 0;
};
//Room
//Create new room (create game room and add yourself there)
// <- to Server
export type CreateNewRoom = {
  type: "create_room";
  data: "";
  id: 0;
};

//Add user to room (add youself to somebodys room, then remove the room from available rooms list)
// <- to Server
export type AddUserToRoom = {
  type: "add_user_to_room";
  data: {
    indexRoom: number | string;
  };
  id: 0;
};
//-> to Client
export type CreateGameToClient = {
  type: "create_game"; //send for both players in the room, after they are connected to the room
  data: {
    idGame: number | string;
    idPlayer:
      | number
      | string /* generated by server id for player in the game session, not enemy (unique id for every player) */;
  };
  id: 0;
};
//Update room state (send rooms list, where only one player inside)
//-> to Client
export type UpdateRoomStateToClient = {
  type: "update_room";
  data: [
    {
      roomId: number | string;
      roomUsers: [
        {
          name: string;
          index: number | string;
        },
      ];
    },
  ];
  id: 0;
};
// Ships
// Add ships to the game board
// <- to Server
export type AddShipsToTheGameBoard = {
  type: "add_ships";
  data: {
    gameId: number | string;
    ships: [
      {
        position: {
          x: number;
          y: number;
        };
        direction: boolean;
        length: number;
        type: "small" | "medium" | "large" | "huge";
      },
    ];
    indexPlayer:
      | number
      | string /* id of the player in the current game session */;
  };
  id: 0;
};
//Start game (only after server receives both player's ships positions)\
//-> to Client
export type StartGameToClient = {
  type: "start_game";
  data: {
    ships: /* player's ships, not enemy's */
    [
      {
        position: {
          x: number;
          y: number;
        };
        direction: boolean;
        length: number;
        type: "small" | "medium" | "large" | "huge";
      },
    ];
    currentPlayerIndex:
      | number
      | string /* id of the player in the current game session, who have sent his ships */;
  };
  id: 0;
};
// Game
// Attack
// <- to Server
export type AttackToServer = {
  type: "attack";
  data: {
    gameId: number | string;
    x: number;
    y: number;
    indexPlayer:
      | number
      | string /* id of the player in the current game session */;
  };
  id: 0;
};
//Attack feedback (should be sent after every shot, miss and after kill sent miss for all cells around ship too)\
//-> to Client
export type AttackFeedbackToClient = {
  type: "attack";
  data: {
    position: {
      x: number;
      y: number;
    };
    currentPlayer:
      | number
      | string /* id of the player in the current game session */;
    status: "miss" | "killed" | "shot";
  };
  id: 0;
};
//Random attack
// <- to Server
export type RandomAttackToServer = {
  type: "randomAttack";
  data: {
    gameId: number | string;
    indexPlayer:
      | number
      | string /* id of the player in the current game session */;
  };
  id: 0;
};
//Info about player's turn (send after game start and every attack, miss or kill result)
//-> to Client
export type InfoAboutPlayerToClient = {
  type: "turn";
  data: {
    currentPlayer:
      | number
      | string /* id of the player in the current game session */;
  };
  id: 0;
};
//Finish game
//-> to Client
export type FinishGame = {
  type: "finish";
  data: {
    winPlayer:
      | number
      | string /* id of the player in the current game session */;
  };
  id: 0;
};
